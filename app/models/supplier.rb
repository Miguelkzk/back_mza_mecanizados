class Supplier < ApplicationRecord
  ############################################################################################
  # ASSOCIATIONS
  ############################################################################################

  has_many :materials
  has_many :orders, through: :materials
  has_many :assessments

  ############################################################################################
  # VALIDATIONS
  ############################################################################################

  validates :name, presence: true

  ############################################################################################
  # SCOPES
  ############################################################################################
  scope :by_name, ->(supplier_name) { where('name ILIKE ?', "%#{supplier_name}%") if supplier_name.present? }

  ############################################################################################
  # CALLBACKS
  ############################################################################################

  ############################################################################################
  # INSTANCE METHODS
  ############################################################################################
  def average_note(attribute = :total_note)
    assessments.average(attribute).to_f
  end

  ############################################################################################
  # CLASS METHODS
  ############################################################################################
end
